---
import PageLayout from "@/layouts/PageLayout.astro";
import { capitalizeFirstLetter } from "@/utils/utils";
import { string_to_slug, formatDate } from "@/utils/utils";
import { Icon } from "astro-icon/components";
import { fade } from "astro:transitions";
const { frontmatter } = Astro.props;

// interface Props {
//   frontmatter: {
//     title: string;
//     subtitle?: string;
//     description: string;
//     author: string;
//     pubDate: Date;
//     tags: string[];
//     minutesRead: string;
//   };
// }
const { title, subtitle, minutesRead, description, pubDate, author, tags } =
  frontmatter;
---

<PageLayout
  description={description}
  title={`Blog | ${title}`}
  showAside={false}
>
  <main>
    <header class="inner post-header content-grid">
      <h1 transition:name={title} class="post-title">
        {capitalizeFirstLetter(title)}
      </h1>
      {subtitle && <p class="subtitle">{subtitle}</p>}
      <div class="tags">
        {
          tags.map((tag: string) => (
            <p class="tag">
              <a href={`/tags/${tag}`}>{tag}</a>
              {/* <Icon size={24} name="devicon:css3" /> */}
            </p>
          ))
        }

        <span class="read-time">{minutesRead}</span>
      </div>
      <p>
        Published on: {formatDate(pubDate)}
        {
          author && (
            <>
              <span>by</span>
              <a href={`/about#${string_to_slug(author)}`}>{author}</a>
            </>
          )
        }
      </p>
    </header>
    <section class="content-grid">
      <!-- <p class="post-description">{description}</p> -->
      <div class="post-content flow">
        <slot />
      </div>
    </section>
  </main>
</PageLayout>

<style>
  header {
    margin-block-start: 2rem;
    /* margin-block-end: 5rem; */
  }

  .post-title {
    text-box: trim-both cap alphabetic;
    font-family: monospace;
    font-family: "Newsreader", sans-serif;
    font-family: "Kass", cursive;
    font-family: var(--font-heading);

    /* font-weight: 900;
    font-optical-sizing: auto;
    font-style: italic;
    font-variant-ligatures: common-ligatures;
    font-variant-numeric: diagonal-fractions; */
    line-height: 1;
    text-wrap: balance;
    font-size: clamp(2.5rem, 5vw + 1rem, 4rem);
    /* margin-left: -1rem; */

    @media (width > 500px) {
      font-size: var(--text-huge);
      font-size: 5rem;
    }
  }
  .subtitle {
    font-size: 1.5rem;
    font-style: italic;
    color: var(--neutral-200);
  }
  .read-time {
    display: block;
    margin-left: auto;
    font-style: italic;
    font-size: 0.875rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.25rem;
    margin-block-start: 1.5rem;
  }

  .tag {
    font-size: 0.75rem;
    a {
      border-radius: var(--radius);
      text-decoration: none;
      color: var(--yin);
      background-color: var(--yang);
      padding: 0.25rem 0.5rem;
      border: 1px solid var(--yin);
    }
  }
  .post-description {
    margin-block: 1.5em;
    background-color: gold;
  }

  .post-content {
    --flow-space: 1.5em;
    padding-bottom: 10rem;

    /* font-family: "Newsreader", sans-serif; */

    h2 {
      font-size: 2rem;
    }

    p {
      /* text-align: justify; */
      text-wrap: pretty;
      /* font-weight: 500; */
      font-size: clamp(1rem, 2vw + 0.5rem, 1.25rem);
      line-height: 1.4;
      line-height: 1.6;
    }

    & > p {
      &:first-child:first-letter {
        initial-letter: 2;
        -webkit-inital-letter: 2;
        padding-right: 0.5rem;
        /* font-family: Bodoni; */
      }

      @supports not (initial-letter: 2) {
        &:first-child:first-letter {
          font-size: 5rem;
          float: left;
          line-height: 0.8;
          padding-right: 0.5rem;
          margin-top: 4px;
        }
      }
    }

    pre {
      background-color: var(--blueish) !important;
      padding: 1rem;

      code {
        font-family: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo,
          Consolas, "DejaVu Sans Mono", monospace;
      }
    }
  }

  .content-grid {
    --padding-inline: 1rem;
    --content-max-width: 75ch;
    --breakout-max-width: 100ch;

    --breakout-size: calc(
      (var(--breakout-max-width) - var(--content-max-width)) / 2
    );

    display: grid;
    grid-template-columns:
      [full-bleed-start] minmax(var(--padding-inline), 1fr)
      [breakout-start] minmax(0, var(--breakout-size)) [content-start] min(
        100% - (var(--padding-inline) * 2),
        var(--content-max-width)
      )
      [content-end] minmax(0, var(--breakout-size)) [breakout-end] minmax(
        var(--padding-inline),
        1fr
      )
      [full-bleed-end];

    row-gap: var(--gap-s);
  }

  .content-grid > :not(.full-bleed, .breakout),
  .full-bleed > :not(.full-bleed, .breakout) {
    grid-column: content;
  }

  .content-grid > .full-bleed {
    grid-column: full-bleed;
    /* display: grid; */
    /* grid-template-columns: inherit; */
  }

  .content-grid > .breakout {
    grid-column: breakout;
  }
</style>
