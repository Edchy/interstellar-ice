---
import PageLayout from "@/layouts/PageLayout.astro";
import { capitalizeFirstLetter } from "@/utils";
import { string_to_slug } from "@/utils";
import type { MarkdownLayoutProps } from "astro";

const { frontmatter } = Astro.props;
const { title, readtime } = frontmatter;

type Props = MarkdownLayoutProps<{
  // Define frontmatter props here
  title: string;
  author: string;
  date: string;
  readtime: number;
  tags: string[];
  description: string;
  pubDate: Date;
}>;
---

<PageLayout
  description={frontmatter.description}
  title={`Blog | ${frontmatter.title}`}
  showAside={false}
>
  <main>
    <header class="inner post-header content-grid">
      <h1 class="">{capitalizeFirstLetter(title)}</h1>
      <div class="tags">
        {
          frontmatter.tags.map((tag: string) => (
            <p class="tag">
              <a href={`/tags/${tag}`}>{tag}</a>
            </p>
          ))
        }
        <span class="read-time">{readtime} min read</span>
      </div>
      <p>
        Published on: {frontmatter.pubDate.toString().slice(0, 10)} by <a
          href={`/author/${string_to_slug(frontmatter.author)}`}
          >{frontmatter.author}</a
        >
      </p>
    </header>
    <section class="content-grid">
      <div class="post-content flow">
        <slot />
      </div>
    </section>
  </main>
</PageLayout>

<style>
  .read-time {
    display: block;
    margin-left: auto;
    font-style: italic;
    font-size: 0.75rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }
  .tag {
    a {
      text-decoration: none;
      color: var(--yang);
      background-color: var(--yin);
      padding: 0.25rem 0.5rem;
    }
  }
  .post-content {
    --flow-space: 3em;
    padding-bottom: 10rem;

    p {
      text-align: justify;
    }

    pre {
      /* background-color: var(--blueish) !important; */
      padding: 1rem;
    }
  }

  h1 {
    text-box: trim-both cap alphabetic;
    font-family: "Kass", cursive;
    font-family: var(--font-heading);
    line-height: 0.9;
    text-wrap: balance;
    font-size: clamp(2.5rem, 5vw + 1rem, 4rem);

    @media (width > 500px) {
      font-size: var(--text-huge);
      font-size: 6rem;
    }
  }

  .content-grid {
    --padding-inline: 1rem;
    --content-max-width: 75ch;
    --breakout-max-width: 140ch;

    --breakout-size: calc(
      (var(--breakout-max-width) - var(--content-max-width)) / 2
    );

    display: grid;
    grid-template-columns:
      [full-bleed-start] minmax(var(--padding-inline), 1fr)
      [breakout-start] minmax(0, var(--breakout-size)) [content-start] min(
        100% - (var(--padding-inline) * 2),
        var(--content-max-width)
      )
      [content-end] minmax(0, var(--breakout-size)) [breakout-end] minmax(
        var(--padding-inline),
        1fr
      )
      [full-bleed-end];

    row-gap: var(--gap-m);
    @media (width > 900px) {
    }
  }

  .content-grid > :not(.full-bleed, .breakout),
  .full-bleed > :not(.full-bleed, .breakout) {
    grid-column: content;
  }

  .content-grid > .full-bleed {
    grid-column: full-bleed;
    display: grid;
    grid-template-columns: inherit;
  }

  .content-grid > .breakout {
    grid-column: breakout;
  }
</style>
