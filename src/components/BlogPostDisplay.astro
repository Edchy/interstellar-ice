---
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "@/utils/utils";
import { fade, slide } from "astro:transitions";

interface Props {
  filteredPosts?: CollectionEntry<"posts">[]; // Make posts optional
  tag?: string;
}
const { filteredPosts, tag } = Astro.props as Props;

const allPosts = filteredPosts || (await getCollection("posts"));

allPosts.sort(
  (a, b) =>
    new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);
---

<h1>Blog {tag ? `/ ${tag}` : ""}</h1>
<div class="grid">
  {
    allPosts.map((post) => {
      return (
        <article class="blog-post">
          <a href={`/blog/${post.slug}`} class="card">
            <h2 transition:name={`${post.data.title}`}>{post.data.title}</h2>
            {post.data.subtitle && <h3>{post.data.subtitle}</h3>}
            <p>{formatDate(post.data.pubDate)}</p>
            <p class="description">{post.data.description}</p>
          </a>
        </article>
      );
    })
  }
</div>

<style>
  h1 {
    font-size: var(--text-huge);
    font-family: var(--font-heading);
  }
  .grid {
    margin-block-start: 2.5rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  article {
    background-color: var(--blueish);
    padding: 1rem;
    border-radius: var(--radius);
    /* max-width: 400px; */
  }
  .description {
    display: -webkit-box;
    -webkit-line-clamp: 6; /* Number of lines to show */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.2;
  }
  a:any-link {
    text-decoration: none;
    color: var(--white);
    /* color: inherit; */
  }
</style>
