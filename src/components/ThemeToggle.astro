---
import { Icon } from "astro-icon/components";
---

<button aria-label="toggle-theme" class="toggle" title="toggle theme">
  <Icon name="FluentEmojiHighContrastFullMoonFace" size={20} class="moon" />
  <Icon name="FluentEmojiHighContrastSunWithFace" size={20} class="sun" />
</button>

<style is:global>
  [aria-label="toggle-theme"] {
    background: none;
    border: none;
    padding: var(--gap-xs);
    display: flex;
    align-items: center;
    justify-content: center;

    &:hover {
      opacity: var(--hover);
    }
    /* Show sun icon in light mode, hide moon icon */
    & .moon {
      display: block;
    }

    & .sun {
      display: none;
    }

    /* When toggle has 'active' class (dark mode), show moon icon and hide sun icon */
    &.active .moon {
      display: none;
    }

    &.active .sun {
      display: block;
    }

    &::after {
      content: "";
      position: fixed;
      bottom: 0;
      left: 0;
      width: 0;
      height: 0;
      background: #ffffff5f;
      border-top-right-radius: 100%;
      transition: all 0.3s ease-out;
      z-index: -1;
      pointer-events: none;
    }
  }

  /* :root:has(.toggle:hover) {
    --yang: light-dark(#121212, var(--white));
    --yin: light-dark(var(--white), #121212);
    --blueish: light-dark(var(--blu), var(--blu2));

    transition: all 4s ease-out;

    [aria-label="toggle-theme"] > * {
      color: var(--yin);
      transition: all 4s ease-out;
    }
  } */
</style>

<script>
  const toggle = document.querySelector(".toggle");

  // Apply theme with view transitions if supported
  function applyThemeWithTransition(isDark: boolean) {
    const updateDOM = () => {
      // Update the document color scheme
      document.documentElement.style.setProperty(
        "color-scheme",
        isDark ? "dark" : "light"
      );

      // Update toggle class for styling purposes
      toggle?.classList.toggle("active", isDark);
    };

    if (document.startViewTransition) {
      // Use View Transitions API if available
      document.startViewTransition(() => updateDOM());
    } else {
      // Fallback for browsers without View Transitions support
      updateDOM();
    }
  }

  function applyInitialTheme() {
    const stored = localStorage.getItem("theme");
    if (stored) {
      const isDark = stored === "moon";
      applyThemeWithTransition(isDark);
      return;
    }

    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      applyThemeWithTransition(true);
    } else {
      applyThemeWithTransition(false);
    }
  }

  function handleSystemThemeChange({ matches }: { matches: boolean }) {
    // Only apply if user hasn't set a preference
    if (!localStorage.getItem("theme")) {
      applyThemeWithTransition(matches);
    }
  }

  applyInitialTheme();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", handleSystemThemeChange);

  toggle?.addEventListener("click", () => {
    const isDark = !toggle.classList.contains("active");
    localStorage.setItem("theme", isDark ? "moon" : "sun");
    applyThemeWithTransition(isDark);
  });
</script>
