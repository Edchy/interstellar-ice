.debug {
  outline: 2px solid lime;
  background: hsl(0 100% 50% / .1)
}

.flex {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.hidden {
  /* Hide text accessibly */
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.quick-flip {
  --transition-duration: 0.325s;
  --timing-function: cubic-bezier(0.66, 0, 0.34, 1);
  overflow-y: clip;

  >* {
    /* inline elements can't use transforms */
    display: block;

    /* the transform is moving it up
         then the translate has a  */
    transition:
      transform var(--transition-duration) var(--timing-function),
      translate 0ms calc(var(--transition-duration) / 2);
  }

  &:is(:hover, :focus-within)>* {
    transform: translateY(-2lh);
    translate: 0 2lh;
  }
}

.nav-list-sorry-not-sorry {
  list-style: none;

  @media (hover) and (prefers-reduced-motion: no-preference) {
    &>li {
      /* transform-origin: right center; */
      transition:
        transform 0.3s,
        opacity 0.3s;
    }

    &:has(> li:hover)>li:not(:hover),
    &:has(> li:focus-within)>li:not(:focus-within) {
      opacity: 0.25;
      transform: scale(0.9);
    }
  }
}


li:has(:focus-visible),
button:focus-visible,
a:focus-visible {
  &:focus-within {
    outline: 2px solid var(--yin);
    outline-offset: .5rem;
    outline-color: var(--clr-accent);
    border-radius: var(--radius);

    &>* {
      outline: none;
    }
  }
}

/* .content-grid {
  --padding-inline: 1rem;
  --content-max-width: 75ch;
  --breakout-max-width: 140ch;

  --breakout-size: calc((var(--breakout-max-width) - var(--content-max-width)) / 2);

  display: grid;
  gap: 1rem;
  grid-template-columns:
    [full-bleed-start] minmax(var(--padding-inline), 1fr) [breakout-start] minmax(0, var(--breakout-size)) [content-start] min(100% - (var(--padding-inline) * 2),
      var(--content-max-width)) [content-end] minmax(0, var(--breakout-size)) [breakout-end] minmax(var(--padding-inline), 1fr) [full-bleed-end];
}

.content-grid> :not(.full-bleed, .breakout),
.full-bleed> :not(.full-bleed, .breakout) {
  grid-column: content;
}

.content-grid>.full-bleed {
  grid-column: full-bleed;
  display: grid;
  grid-template-columns: inherit;
}

.content-grid>.breakout {
  grid-column: breakout;
} */